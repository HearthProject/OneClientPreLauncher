buildscript {
	repositories  {
		mavenCentral()
		flatDir dirs: "libs"
	}
	dependencies {
		classpath 'plugin:plugin:0.1.17'
		classpath 'commons-io:commons-io:2.5'
		classpath 'org.apache.commons:commons-lang3:3.6'
		classpath 'org.codehaus.plexus:plexus-utils:3.1.0'
		classpath 'com.google.code.gson:gson:2.8.1'
		classpath 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201706111038-r'
		classpath 'com.amazonaws:aws-java-sdk:1.11.186'
	}
}

apply plugin: 'org.echocat.golang'

group 'github.com/HearthProject/OneClientPreLauncher'

version = "0.0.2"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

setVersion()

golang {
    dependencies {
        build 'github.com/shibukawa/configdir'
        build 'github.com/jmoiron/jsonq'
		build 'github.com/inconshreveable/go-update'
    }
    build {
        outputFilenamePattern = project.getBuildDir().getPath() + '/out/OneClient-' + version + '-%{platform}%{extension}'
        excludes = ['.git/**', 'build.gradle', 'build/**', '.gradle/**', 'gradle/**', 'data/**', '.gitignore', '.gradlew', '.gradlew.bat', 'README.md']
		arguments = ["-ldflags=\"-H=windowsgui\""]
    }
    toolchain {
        goversion = 'go1.9'
    }
    platforms = System.getProperty("platforms", "windows-amd64,windows-386,darwin-amd64,linux-amd64,linux-386")
}

import groovy.json.JsonOutput
import java.security.MessageDigest
import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils
import java.io.File
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.auth.BasicAWSCredentials

task buildInfo() {
	doLast {
		def buildInfo = new TreeMap<String,Object>()
		buildInfo['name'] = project.name
		buildInfo['version'] = project.version
		buildInfo['date'] = new Date()

		buildInfo['files'] = getFileData()

		def jsonFile = new File(project.getBuildDir().getPath() + "/out/" + project.version  + "-fileData.json")
		jsonFile.write JsonOutput.prettyPrint(JsonOutput.toJson(buildInfo))

		def launcherInfo = new TreeMap<String,Object>()
		launcherInfo['version'] = project.version
		launcherInfo['versionJsonURL'] = "https://s3.eu-west-2.amazonaws.com/hearthstorage.hearthproject.uk/oneclient/launcher/versions/" + project.version  + "-fileData.json"
		launcherInfo['versionSha1'] = calcSha1(jsonFile)
		launcherInfo['versionSha256'] = calcSha256(jsonFile)

		new File(project.getBuildDir().getPath() + "/out/prelauncher_versions.json").write JsonOutput.prettyPrint(JsonOutput.toJson(launcherInfo))
	}
}

def getFileData() {
	def fileData = new TreeMap<String,Object>()

	fileData['windows-386'] = getFileInfo("windows-386.exe")
	fileData['windows-amd64'] = getFileInfo("windows-amd64.exe")
	fileData['darwin-amd64'] = getFileInfo("darwin-amd64")
	fileData['linux-amd64'] = getFileInfo("linux-amd64")
	fileData['linux-linux-386'] = getFileInfo("linux-386")

	return fileData
}

def getFileInfo(platform){
	def file = getBinFile(platform)
	def fileInfo = new TreeMap<String,Object>()
	fileInfo['platform'] = platform
	fileInfo['filename'] = file.name
	fileInfo['sha1'] = calcSha1(file)
	fileInfo['sha256'] = calcSha256(file)
	fileInfo['size'] = file.length()
	fileInfo['version'] = project.version
	fileInfo['url'] = "https://s3.eu-west-2.amazonaws.com/hearthstorage.hearthproject.uk/oneclient/launcher/versions/" + file.name
	return fileInfo
}

def getBinFile(platform){
	return new File(project.getBuildDir().getPath() + "/out/OneClient-" + project.version + "-" + platform)
}


def calcSha1(file) {
	MessageDigest md = MessageDigest.getInstance("SHA-1")
	file.eachByte 4096, {bytes, size ->
		md.update(bytes, 0, size)
	}
	return md.digest().collect {String.format "%02x", it}.join()
}

def calcSha256(file) {
	MessageDigest md = MessageDigest.getInstance("SHA-256")
	file.eachByte 4096, {bytes, size ->
		md.update(bytes, 0, size)
	}
	return md.digest().collect {String.format "%02x", it}.join()
}

def setVersion(){
	def file = new File("utils/version.go")
	def oldFile = new File("utils/version.go.old")
	def data = FileUtils.readFileToString(file)
	FileUtils.writeStringToFile(file, data.replace("%VERSION%", project.version))
	FileUtils.writeStringToFile(oldFile, data)
}

def restoreVersionFile(){
	def file = new File("utils/version.go")
	def oldFile = new File("utils/version.go.old")
	FileUtils.writeStringToFile(file, FileUtils.readFileToString(oldFile))
	oldFile.delete()
}

task restoreVerison(){
	doLast {
		restoreVersionFile()
	}
}

def uploadFileToS3(file, location){
	project.logger.lifecycle("Uploading " + file + " to aws s3")
	def s3 = new AmazonS3Client(new BasicAWSCredentials(project.getProperty('aws_access_key'), project.getProperty('aws_secret_key')))
	s3.putObject("hearthstorage.hearthproject.uk", location + "/" + file.name , file)
}

task awsUpload(){
	doLast {
		uploadFileToS3(getBinFile("windows-386.exe"), "oneclient/launcher/versions")
		uploadFileToS3(getBinFile("windows-amd64.exe"), "oneclient/launcher/versions")
		uploadFileToS3(getBinFile("darwin-amd64"), "oneclient/launcher/versions")
		uploadFileToS3(getBinFile("linux-amd64"), "oneclient/launcher/versions")
		uploadFileToS3(getBinFile("linux-386"), "oneclient/launcher/versions")
		uploadFileToS3(getBinFile("linux-386"), "oneclient/launcher/versions")
		uploadFileToS3(new File(project.getBuildDir().getPath() + "/out/" + project.version  + "-fileData.json"), "oneclient/launcher/versions")
	}
}


build.finalizedBy buildInfo
buildInfo.finalizedBy restoreVerison